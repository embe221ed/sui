---
source: crates/sui-graphql-rpc/tests/snapshot_tests.rs
expression: sdl
---
type Address implements ObjectOwner {
	"""
	Similar behavior to the `transactionBlockConnection` in Query but
	supports additional `AddressTransactionBlockRelationship` filter
	"""
	transactionBlockConnection(first: Int, after: String, last: Int, before: String, relation: AddressTransactionBlockRelationship, filter: TransactionBlockFilter): TransactionBlockConnection
	location: SuiAddress!
	objectConnection(first: Int, after: String, last: Int, before: String, filter: ObjectFilter): ObjectConnection
	balance(type: String): Balance
	balanceConnection(first: Int, after: String, last: Int, before: String): BalanceConnection
	coinConnection(first: Int, after: String, last: Int, before: String, type: String): CoinConnection
	stakeConnection(first: Int, after: String, last: Int, before: String): StakeConnection
	defaultNameServiceName: String
	nameServiceConnection(first: Int, after: String, last: Int, before: String): NameServiceConnection
}

enum AddressTransactionBlockRelationship {
	SIGN
	SENT
	RECV
	PAID
}

type AuthenticatorStateUpdate {
	value: String!
}

type Balance {
	coinType: String
	coinObjectCount: Int
	totalBalance: BigInt
}

type BalanceChange {
	owner: Owner
	amount: BigInt
}

type BalanceConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BalanceEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Balance!]!
}

"""
An edge in a connection.
"""
type BalanceEdge {
	"""
	The item at the end of the edge
	"""
	node: Balance!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

scalar Base64

scalar BigInt


type ChangeEpochTransaction {
	timestamp: DateTime
	storageCharge: BigInt
	computationCharge: BigInt
	storageRebate: BigInt
	epoch: Epoch
}

type Checkpoint {
	digest: String!
	sequenceNumber: Int!
	timestamp: DateTime
	validatorSignature: Base64
	previousCheckpointDigest: String
	liveObjectSetDigest: String
	networkTotalTransactions: Int
	rollingGasSummary: GasCostSummary
	endOfEpoch: EndOfEpochData
	epoch: Epoch
	transactionBlockConnection(first: Int, after: String, last: Int, before: String, filter: TransactionBlockFilter): TransactionBlockConnection
}

type CheckpointConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CheckpointEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Checkpoint!]!
}

"""
An edge in a connection.
"""
type CheckpointEdge {
	"""
	The item at the end of the edge
	"""
	node: Checkpoint!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CheckpointId {
	digest: String
	sequenceNumber: Int
}

type Coin {
	id: ID!
	balance: BigInt
	asMoveObject: MoveObject
}

type CoinConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CoinEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Coin!]!
}

"""
An edge in a connection.
"""
type CoinEdge {
	"""
	The item at the end of the edge
	"""
	node: Coin!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type CommitteeMember {
	authorityName: String
	stakeUnit: Int
}

type ConsensusCommitPrologueTransaction {
	round: Int
	timestamp: DateTime
	epoch: Epoch
}

scalar DateTime

type EndOfEpochData {
	newCommittee: [CommitteeMember!]
	nextProtocolVersion: Int
}

type EndOfEpochTransaction {
	value: String!
}

type Epoch {
	epochId: Int!
	referenceGasPrice: BigInt
	validatorSet: ValidatorSet
	startTimestamp: DateTime
	endTimestamp: DateTime
	protocolConfigs: ProtocolConfigs
	checkpointConnection(first: Int, after: String, last: Int, before: String): CheckpointConnection
	transactionBlockConnection(first: Int, after: String, last: Int, before: String, filter: TransactionBlockFilter): TransactionBlockConnection
}

type Event {
	id: ID!
	sendingModuleId: MoveModuleId
	eventType: MoveType
	senders: [Address!]
	timestamp: DateTime
	json: String
	bcs: Base64
}

type EventConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EventEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Event!]!
}

"""
An edge in a connection.
"""
type EventEdge {
	"""
	The item at the end of the edge
	"""
	node: Event!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input EventFilter {
	sender: SuiAddress
	transactionDigest: String
	emittingPackage: SuiAddress
	emittingModule: String
	eventPackage: SuiAddress
	eventModule: String
	eventType: String
}

enum ExecutionStatus {
	SUCCESS
	FAILURE
}

"""
Groups of features served by the RPC service.  The GraphQL Service can be configured to enable
or disable these features.
"""
enum Feature {
	"""
	Statistics about how the network was running (TPS, top packages, APY, etc)
	"""
	ANALYTICS
	"""
	Coin metadata, per-address coin and balance information.
	"""
	COINS
	"""
	Querying an object's dynamic fields.
	"""
	DYNAMIC_FIELDS
	"""
	SuiNS name and reverse name look-up.
	"""
	NAME_SERVICE
	"""
	Transaction and Event subscriptions.
	"""
	SUBSCRIPTIONS
	"""
	Information about the system that changes from epoch to epoch (protocol config, committee,
	reference gas price).
	"""
	SYSTEM_STATE
}


type GasCostSummary {
	computationCost: BigInt
	storageCost: BigInt
	storageRebate: BigInt
	nonRefundableStorageFee: BigInt
}

type GasEffects {
	gasObject: Object
	gasSummary: GasCostSummary
}

type GasInput {
	gasSponsor: Address
	gasPayment(first: Int, after: String, last: Int, before: String): ObjectConnection
	gasPrice: BigInt
	gasBudget: BigInt
}

type GenesisTransaction {
	objects: [SuiAddress!]
}



"""
The contents of a Move Value, corresponding to the following recursive type:

type MoveData =
    { Address: SuiAddress }
  | { UID:     SuiAddress }
  | { Bool:    bool }
  | { Number:  BigInt }
  | { String:  string }
  | { Vector:  [MoveData] }
  | { Option:   MoveData? }
  | { Struct:  [{ name: string, value: MoveData }] }
"""
scalar MoveData

type MoveModule {
	fileFormatVersion: Int!
}

type MoveModuleConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [MoveModuleEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [MoveModule!]!
}

"""
An edge in a connection.
"""
type MoveModuleEdge {
	"""
	The item at the end of the edge
	"""
	node: MoveModule!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type MoveModuleId {
	name: String!
	package: MovePackage!
}

type MoveObject {
	contents: MoveValue
	hasPublicTransfer: Boolean
	asObject: Object
	asCoin: Coin
	asStake: Stake
}

type MovePackage {
	module(name: String!): MoveModule
	moduleConnection(first: Int, after: String, last: Int, before: String): MoveModuleConnection
	asObject: Object
}

"""
Represents concrete types (no type parameters, no references)
"""
type MoveType {
	"""
	Flat representation of the type signature, as a displayable string.
	"""
	repr: String!
	"""
	Structured representation of the type signature.
	"""
	signature: MoveTypeSignature!
	"""
	Structured representation of the "shape" of values that match this type.
	"""
	layout: MoveTypeLayout!
}

"""
The shape of a concrete Move Type (a type with all its type parameters instantiated with concrete types), corresponding to the following recursive type:

type MoveTypeLayout =
    "address"
  | "bool"
  | "u8" | "u16" | ... | "u256"
  | { vector: MoveTypeLayout }
  | { struct: [{ name: string, layout: MoveTypeLayout }] }
"""
scalar MoveTypeLayout

"""
The signature of a concrete Move Type (a type with all its type parameters instantiated with concrete types, that contains no references), corresponding to the following recursive type:

type MoveTypeSignature =
    "address"
  | "bool"
  | "u8" | "u16" | ... | "u256"
  | { vector: MoveTypeSignature }
  | {
      struct: {
        package: string,
        module: string,
        type: string,
        typeParameters: [MoveTypeSignature],
      }
    }
"""
scalar MoveTypeSignature

type MoveValue {
	type: MoveType!
	bcs: Base64!
	data: MoveData!
}

scalar NameService

type NameServiceConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [NameServiceEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [NameService!]!
}

"""
An edge in a connection.
"""
type NameServiceEdge {
	"""
	The item at the end of the edge
	"""
	node: NameService!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Object implements ObjectOwner {
	version: Int!
	digest: String!
	storageRebate: BigInt
	bcs: Base64
	previousTransactionBlock: TransactionBlock
	kind: ObjectKind
	owner: Owner
	asMoveObject: MoveObject
	asMovePackage: MovePackage
	location: SuiAddress!
	objectConnection(first: Int, after: String, last: Int, before: String, filter: ObjectFilter): ObjectConnection
	balance(type: String): Balance
	balanceConnection(first: Int, after: String, last: Int, before: String): BalanceConnection
	coinConnection(first: Int, after: String, last: Int, before: String, type: String): CoinConnection
	stakeConnection(first: Int, after: String, last: Int, before: String): StakeConnection
	defaultNameServiceName: String
	nameServiceConnection(first: Int, after: String, last: Int, before: String): NameServiceConnection
}

type ObjectChange {
	inputState: Object
	outputState: Object
	idCreated: Boolean
	idDeleted: Boolean
}

type ObjectConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ObjectEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Object!]!
}

"""
An edge in a connection.
"""
type ObjectEdge {
	"""
	The item at the end of the edge
	"""
	node: Object!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input ObjectFilter {
	package: SuiAddress
	module: String
	ty: String
	owner: SuiAddress
	objectIds: [SuiAddress!]
	objectKeys: [ObjectKey!]
}

input ObjectKey {
	objectId: SuiAddress!
	version: Int!
}

enum ObjectKind {
	OWNED
	CHILD
	SHARED
	IMMUTABLE
}

interface ObjectOwner {
	location: SuiAddress!
	objectConnection(first: Int, after: String, last: Int, before: String, filter: ObjectFilter): ObjectConnection
	balance(type: String): Balance
	balanceConnection(first: Int, after: String, last: Int, before: String): BalanceConnection
	coinConnection(first: Int, after: String, last: Int, before: String, type: String): CoinConnection
	stakeConnection(first: Int, after: String, last: Int, before: String): StakeConnection
	defaultNameServiceName: String
	nameServiceConnection(first: Int, after: String, last: Int, before: String): NameServiceConnection
}

type Owner implements ObjectOwner {
	asAddress: Address
	asObject: Object
	location: SuiAddress!
	objectConnection(first: Int, after: String, last: Int, before: String, filter: ObjectFilter): ObjectConnection
	balance(type: String): Balance
	balanceConnection(first: Int, after: String, last: Int, before: String): BalanceConnection
	coinConnection(first: Int, after: String, last: Int, before: String, type: String): CoinConnection
	stakeConnection(first: Int, after: String, last: Int, before: String): StakeConnection
	defaultNameServiceName: String
	nameServiceConnection(first: Int, after: String, last: Int, before: String): NameServiceConnection
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type ProgrammableTransaction {
	value: String!
}

type ProtocolConfigAttr {
	key: String!
	value: String!
}

type ProtocolConfigFeatureFlag {
	key: String!
	value: Boolean!
}

type ProtocolConfigs {
	protocolVersion: Int!
	featureFlags: [ProtocolConfigFeatureFlag!]!
	configs: [ProtocolConfigAttr!]!
	config(key: String!): ProtocolConfigAttr
	featureFlag(key: String!): ProtocolConfigFeatureFlag
}

type Query {
	"""
	First four bytes of the network's genesis checkpoint digest (uniquely identifies the
	network).
	"""
	chainIdentifier: String!
	"""
	Configuration for this RPC service
	"""
	serviceConfig: ServiceConfig!
	owner(address: SuiAddress!): ObjectOwner
	object(address: SuiAddress!, version: Int): Object
	address(address: SuiAddress!): Address
	epoch(id: Int): Epoch
	checkpoint(id: CheckpointId): Checkpoint
	transactionBlock(digest: String!): TransactionBlock
	checkpointConnection(first: Int, after: String, last: Int, before: String): CheckpointConnection
	transactionBlockConnection(first: Int, after: String, last: Int, before: String, filter: TransactionBlockFilter): TransactionBlockConnection
	eventConnection(first: Int, after: String, last: Int, before: String, filter: EventFilter!): EventConnection
	objectConnection(first: Int, after: String, last: Int, before: String, filter: ObjectFilter): ObjectConnection
	protocolConfig(protocolVersion: Int): ProtocolConfigs!
	resolveNameServiceAddress(name: String!): Address
	latestSuiSystemState: SuiSystemStateSummary!
}

type SafeMode {
	enabled: Boolean
	gasSummary: GasCostSummary
}

type ServiceConfig {
	"""
	Check whether `feature` is enabled on this GraphQL service.
	"""
	isEnabled(feature: Feature!): Boolean!
	"""
	List of all features that are enabled on this GraphQL service.
	"""
	enabledFeatures: [Feature!]!
	"""
	The maximum depth a GraphQL query can be to be accepted by this service.
	"""
	maxQueryDepth: Int!
	"""
	The maximum number of nodes (field names) the service will accept in a single query.
	"""
	maxQueryNodes: Int!
}

type Stake {
	id: ID!
	estimatedReward: BigInt
	principal: BigInt
	status: StakeStatus
	activeEpoch: Epoch
	requestEpoch: Epoch
	asMoveObject: MoveObject
}

type StakeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [StakeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Stake!]!
}

"""
An edge in a connection.
"""
type StakeEdge {
	"""
	The item at the end of the edge
	"""
	node: Stake!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum StakeStatus {
	ACTIVE
	PENDING
	UNSTAKED
}

type StakeSubsidy {
	balance: BigInt
	distributionCounter: Int
	currentDistributionAmount: BigInt
	periodLength: Int
	decreaseRate: Int
}

type StorageFund {
	totalObjectStorageRebates: BigInt
	nonRefundableBalance: BigInt
}


scalar SuiAddress

type SuiSystemStateSummary {
	systemStateVersion: BigInt
	referenceGasPrice: BigInt
	systemParameters: SystemParameters
	stakeSubsidy: StakeSubsidy
	validatorSet: ValidatorSet
	storageFund: StorageFund
	safeMode: SafeMode
	startTimestamp: DateTime
	epoch: Epoch
	protocolConfigs: ProtocolConfigs
}

type SystemParameters {
	durationMs: BigInt
	stakeSubsidyStartEpoch: Int
	minValidatorCount: Int
	maxValidatorCount: Int
	minValidatorJoiningStake: BigInt
	validatorLowStakeThreshold: BigInt
	validatorVeryLowStakeThreshold: BigInt
	validatorLowStakeGracePeriod: BigInt
}

type TransactionBlock {
	effects: TransactionBlockEffects
	sender: Address
	bcs: Base64
	gasInput: GasInput
	kind: TransactionBlockKind
	signatures: [TransactionSignature]
	digest: String!
	expiration: Epoch
}

type TransactionBlockConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [TransactionBlockEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [TransactionBlock!]!
}

"""
An edge in a connection.
"""
type TransactionBlockEdge {
	"""
	The item at the end of the edge
	"""
	node: TransactionBlock!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type TransactionBlockEffects {
	status: ExecutionStatus!
	errors: String
	lamportVersion: Int
	balanceChanges: [BalanceChange]
	checkpoint: Checkpoint
	dependencies: [TransactionBlock]
	epoch: Epoch
	gasEffects: GasEffects
	objectChanges: [ObjectChange]
	transactionBlock: TransactionBlock
}

input TransactionBlockFilter {
	package: SuiAddress
	module: String
	function: String
	kind: TransactionBlockKindInput
	afterCheckpoint: Int
	atCheckpoint: Int
	beforeCheckpoint: Int
	signAddress: SuiAddress
	sentAddress: SuiAddress
	recvAddress: SuiAddress
	paidAddress: SuiAddress
	inputObject: SuiAddress
	changedObject: SuiAddress
	transactionIds: [String!]
}

union TransactionBlockKind = ConsensusCommitPrologueTransaction | GenesisTransaction | ChangeEpochTransaction | ProgrammableTransaction | AuthenticatorStateUpdate | EndOfEpochTransaction

enum TransactionBlockKindInput {
	SYSTEM_TX
	PROGRAMMABLE_TX
}

type TransactionSignature {
	base64Sig: Base64!
}

type Validator {
	address: Address!
	credentials: ValidatorCredentials
	nextEpochCredentials: ValidatorCredentials
	name: String
	description: String
	imageUrl: String
	projectUrl: String
	exchangeRatesSize: Int
	stakingPoolActivationEpoch: Int
	stakingPoolSuiBalance: BigInt
	rewardsPool: BigInt
	poolTokenBalance: BigInt
	pendingStake: BigInt
	pendingTotalSuiWithdraw: BigInt
	pendingPoolTokenWithdraw: BigInt
	votingPower: Int
	gasPrice: BigInt
	commissionRate: Int
	nextEpochStake: BigInt
	nextEpochGasPrice: BigInt
	nextEpochCommissionRate: Int
	atRisk: Int
	reportRecords: [SuiAddress!]
	operationCap: MoveObject
	stakingPool: MoveObject
	exchangeRates: MoveObject
}

type ValidatorCredentials {
	protocolPubKey: Base64
	networkPubKey: Base64
	workerPubKey: Base64
	proofOfPossession: Base64
	netAddress: String
	p2PAddress: String
	primaryAddress: String
	workerAddress: String
}

type ValidatorSet {
	totalStake: BigInt
	activeValidators: [Validator!]
	pendingRemovals: [Int!]
	pendingActiveValidatorsSize: Int
	stakePoolMappingsSize: Int
	inactivePoolsSize: Int
	validatorCandidatesSize: Int
}

schema {
	query: Query
}
